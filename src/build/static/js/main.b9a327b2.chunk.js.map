{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/ArticlesList.js","pages/article-content.js","pages/ArticleListPage.js","components/CommentsList.js","components/UpvotesSection.js","pages/NotFoundPage.js","components/AddCommentForm.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Fragment","AboutPage","ArticleList","articles","map","article","key","className","to","name","title","content","substring","ArticleListPage","ArticlesList","articleContent","CommentsList","comments","comment","username","text","UpvoteSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","onClick","NotFoundPage","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","id","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","find","articleInfo","useEffect","fecthData","otherArticles","filter","UpvotesSection","paragraph","NavBar","App","path","component","exact","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9a327b2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HomePage = () => (\r\n    <React.Fragment>\r\n        <h1>Hello, Welcome to my blog</h1>\r\n        <p>\r\n            Welcome to my blog, tootiensah oidchhewuv sdhgdqiuef iufgrfuiq qfruqrgfuicasg uihudv\r\n            , ufheiufhq oifehef;oeihf eufhe;fhef;f fejhfae;rf  . auepfhefehfqe;fioherferjghsvu \r\n            a ha;har;gihs g. sfjhfgsg iufgkysgfsl dfuegsug udvhesrherg\r\n            a rjharei ugahr;aruhg ;rgha;ghr g har;guhs h khviudhvuisdhvf.\r\n        </p>\r\n        <p>\r\n            Welcome to my blog, tootiensah oidchhewuv sdhgdqiuef iufgrfuiq qfruqrgfuicasg uihudv\r\n            , ufheiufhq oifehef;oeihf eufhe;fhef;f fejhfae;rf  . auepfhefehfqe;fioherferjghsvu \r\n            a ha;har;gihs g. sfjhfgsg iufgkysgfsl dfuegsug udvhesrherg\r\n            a rjharei ugahr;aruhg ;rgha;ghr g har;guhs h khviudhvuisdhvf.\r\n        </p>\r\n    </React.Fragment>    \r\n);\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\n\r\nconst AboutPage = () => (\r\n    <React.Fragment>\r\n        <h1>About Me</h1>\r\n        <p>\r\n            Welcome to my blog, tootiensah oidchhewuv sdhgdqiuef iufgrfuiq qfruqrgfuicasg uihudv\r\n            , ufheiufhq oifehef;oeihf eufhe;fhef;f fejhfae;rf  . auepfhefehfqe;fioherferjghsvu \r\n            a ha;har;gihs g. sfjhfgsg iufgkysgfsl dfuegsug udvhesrherg\r\n            a rjharei ugahr;aruhg ;rgha;ghr g har;guhs h khviudhvuisdhvf.\r\n        </p>\r\n        <p>\r\n            Welcome to my blog, tootiensah oidchhewuv sdhgdqiuef iufgrfuiq qfruqrgfuicasg uihudv\r\n            , ufheiufhq oifehef;oeihf eufhe;fhef;f fejhfae;rf  . auepfhefehfqe;fioherferjghsvu \r\n            a ha;har;gihs g. sfjhfgsg iufgkysgfsl dfuegsug udvhesrherg\r\n            a rjharei ugahr;aruhg ;rgha;ghr g har;guhs h khviudhvuisdhvf.\r\n        </p>\r\n    </React.Fragment>    \r\n);\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ArticleList = ({articles}) => (\r\n    <>\r\n        {articles.map((article, key) => (\r\n            <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\r\n                <h3>{article.title}</h3>\r\n                <p>{article.content[0].substring(0,150)}...</p>\r\n            </Link>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default ArticleList;","const articles = [\r\n    {\r\n        name: 'learn-react',\r\n        title: 'The Fastest Way to Learn React',\r\n        content: [\r\n            ` working as expected with React Router, The interesting part about this page is that \r\n            it should show our article about learning React. We're going to use name for our URL parameter. \r\n            in this case articlePage, that tells our component the value of the section of our URL. In other words, \r\n            the string that occupies this spot in the URL in the user's browser. So for example if we navigate \r\n            to article/learn-react inside our component? Now this match prop contains some useful information, \r\n            to our component. And then we're going to pull our URL parameter, name, And then we're going to pull \r\n            our URL parameter, name, out of match. And that'll look like this. And that'll look like this. \r\n            We'll say const name = match.params.name. And for now, as a proof of concept, let's display the \r\n            value of the name parameter in our heading. in our heading. So we just want to say {name} \r\n            and we'll change this to the. So now if we make sure our app is running and navigate to /article/ - \r\n            some phrase - we'll say learn-react, we'll say learn-react, we see that heading correctly displays the \r\n            string we see that heading correctly displays the string that we have in the part of the URL. \r\n            that we have in the part of the URL. And if we change it again to something like hello we see that \r\n            it displays it there as well. The important thing to take away from this is that our ArticlePage component \r\n            now has access to the value of the URL parameter and can make changes to itself accordingly. and can make \r\n            changes to itself accordingly. In order to see the real power of this setup, In order to see the real power \r\n            of this setup, we need some content. we need some content. Let's create a new file in our Pages directory \r\n            called article-content.js. And I've provided some sample content for you in the exercise files, in the \r\n            exercise files, so I'm going to add that in right here. so I'm going to add that in right here. Now this \r\n            sample contains an array of JavaScript objects which represent articles, which represent articles, \r\n            with the article's title, which is a string, and content, which is an array of strings, each of which \r\n            represents a paragraph in our article. In reality we might choose to represent our article data In reality we \r\n            might choose to represent our article data in many other forms, in many other forms, but for demonstration \r\n            purposes this is the format we're going to use here. this is the format we're going to use here. Notice that \r\n            each of our articles also has a name property. This is the unique that we'll use to match our URL parameters. \r\n            And notice how we also export our sample data at the bottom of the file. at the bottom of the file. So now that \r\n            we've got the article-content.js file we're going to import it into our ArticlePage file. Import - we'll call it \r\n            articleContent - from ./article-content. Now our ArticlePage component now has access to whatever name we put \r\n            into the URL, as we've seen. So what we want to do is find the article from our articles array that has that name.\r\n            And the way we do this is like this. We say const article = articleContent.find and then we want to find the article \r\n            whose name is equal to the name property that we get is equal to the name property that we get from the URL \r\n            parameters. And finally we'll convert this article information into JSX. And finally we'll convert this article \r\n            information into JSX. So first we're going to change our heading to display just the article's title property. \r\n            And then underneath that And then underneath that we're going to want to map our article's content property, which \r\n            is a bunch of strings representing paragraphs, to a bunch of JSX elements. And that'll look like this. \r\n            .map(paragraph, and we'll put two paragraph tags and put the paragraph string in between it. and put the paragraph \r\n            string in between it. And since React wants us to assign a key prop to our elements whenever we use map, we just \r\n            have to add a key argument to our map function. And then we add that key prop to the paragraph elements here. \r\n            Finally, if we go back to our app running in the browser window we might see an error like this. This is displaying \r\n            because the name hello This is displaying because the name hello doesn't match any of the articles we have. We'll \r\n            learn how to get rid of this error in a minute. But for now let's type in the name But for now let's type in the \r\n            name of an article that really exists. We'll do learn-react. And now we see that our article's content is \r\n            displayed. But the problem is, as we've already seen, But the problem is, as we've already seen, if we put in \r\n            the name of an article that doesn't exist, for instance, hello, we get an error. We'll come up with a more \r\n            permanent fix for this in a later video. But for now let's just add an if statement to our code that returns \r\n            some JSX with an error message like this. We'll say if article doesn't exist We'll say if article doesn't exist \r\n            we just want to return a heading that says article does not exist. Now if we go back, we see that instead of a \r\n            nasty looking error, we just get a heading that tells us we just get a heading that tells us that the article \r\n            doesn't exist. that the article doesn't exist.`\r\n        ]\r\n    },\r\n    {\r\n        name: 'road-to-learn-react',\r\n        title: 'The Road to Learn React',\r\n        content: [\r\n            ` working as expected with React Router, The interesting part about this page is that \r\n            it should show our article about learning React. We're going to use name for our URL parameter. \r\n            in this case articlePage, that tells our component the value of the section of our URL. In other words, \r\n            the string that occupies this spot in the URL in the user's browser. So for example if we navigate \r\n            to article/learn-react inside our component? Now this match prop contains some useful information, \r\n            to our component. And then we're going to pull our URL parameter, name, And then we're going to pull \r\n            our URL parameter, name, out of match. And that'll look like this. And that'll look like this. \r\n            We'll say const name = match.params.name. And for now, as a proof of concept, let's display the \r\n            value of the name parameter in our heading. in our heading. So we just want to say {name} \r\n            and we'll change this to the. So now if we make sure our app is running and navigate to /article/ - \r\n            some phrase - we'll say learn-react, we'll say learn-react, we see that heading correctly displays the \r\n            string we see that heading correctly displays the string that we have in the part of the URL. \r\n            that we have in the part of the URL. And if we change it again to something like hello we see that \r\n            it displays it there as well. The important thing to take away from this is that our ArticlePage component \r\n            now has access to the value of the URL parameter and can make changes to itself accordingly. and can make \r\n            changes to itself accordingly. In order to see the real power of this setup, In order to see the real power \r\n            of this setup, we need some content. we need some content. Let's create a new file in our Pages directory \r\n            called article-content.js. And I've provided some sample content for you in the exercise files, in the \r\n            exercise files, so I'm going to add that in right here. so I'm going to add that in right here. Now this \r\n            sample contains an array of JavaScript objects which represent articles, which represent articles, \r\n            with the article's title, which is a string, and content, which is an array of strings, each of which \r\n            represents a paragraph in our article. In reality we might choose to represent our article data In reality we \r\n            might choose to represent our article data in many other forms, in many other forms, but for demonstration \r\n            purposes this is the format we're going to use here. this is the format we're going to use here. Notice that \r\n            each of our articles also has a name property. This is the unique that we'll use to match our URL parameters. \r\n            And notice how we also export our sample data at the bottom of the file. at the bottom of the file. So now that \r\n            we've got the article-content.js file we're going to import it into our ArticlePage file. Import - we'll call it \r\n            articleContent - from ./article-content. Now our ArticlePage component now has access to whatever name we put \r\n            into the URL, as we've seen. So what we want to do is find the article from our articles array that has that name.\r\n            And the way we do this is like this. We say const article = articleContent.find and then we want to find the article \r\n            whose name is equal to the name property that we get is equal to the name property that we get from the URL \r\n            parameters. And finally we'll convert this article information into JSX. And finally we'll convert this article \r\n            information into JSX. So first we're going to change our heading to display just the article's title property. \r\n            And then underneath that And then underneath that we're going to want to map our article's content property, which \r\n            is a bunch of strings representing paragraphs, to a bunch of JSX elements. And that'll look like this. \r\n            .map(paragraph, and we'll put two paragraph tags and put the paragraph string in between it. and put the paragraph \r\n            string in between it. And since React wants us to assign a key prop to our elements whenever we use map, we just \r\n            have to add a key argument to our map function. And then we add that key prop to the paragraph elements here. \r\n            Finally, if we go back to our app running in the browser window we might see an error like this. This is displaying \r\n            because the name hello This is displaying because the name hello doesn't match any of the articles we have. We'll \r\n            learn how to get rid of this error in a minute. But for now let's type in the name But for now let's type in the \r\n            name of an article that really exists. We'll do learn-react. And now we see that our article's content is \r\n            displayed. But the problem is, as we've already seen, But the problem is, as we've already seen, if we put in \r\n            the name of an article that doesn't exist, for instance, hello, we get an error. We'll come up with a more \r\n            permanent fix for this in a later video. But for now let's just add an if statement to our code that returns \r\n            some JSX with an error message like this. We'll say if article doesn't exist We'll say if article doesn't exist \r\n            we just want to return a heading that says article does not exist. Now if we go back, we see that instead of a \r\n            nasty looking error, we just get a heading that tells us we just get a heading that tells us that the article \r\n            doesn't exist. that the article doesn't exist.`\r\n        ]\r\n    },\r\n];\r\n\r\nexport default articles;","import React from 'react';\r\nimport ArticlesList from \"../components/ArticlesList\";\r\nimport articleContent from './article-content';\r\n\r\nconst ArticleListPage = () => (\r\n    <React.Fragment>\r\n        <h1>Articles</h1>\r\n        <ArticlesList articles={articleContent}/>        \r\n    </React.Fragment>    \r\n);\r\n\r\nexport default ArticleListPage;","import React from 'react';\r\n\r\nconst CommentsList = ({ comments}) => (\r\n    <>\r\n        <h3>Comments:</h3>\r\n        {comments.map((comment, key) => (\r\n            <div className=\"comment\" key = {key}>\r\n                <h4>{comment.username}</h4>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default CommentsList;","import React from 'react'\r\n\r\nconst UpvoteSection = ({articleName, upvotes, setArticleInfo}) => {\r\n    const upvoteArticle = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/upvote`,{\r\n            method: 'post',\r\n\r\n        });\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n    }\r\n    return(\r\n        <div className=\"upvotes-section\">\r\n            <button onClick={() => upvoteArticle()}>Add Upvote</button>\r\n            <p>This post has been upvoted {upvotes} times</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpvoteSection;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React, { useState } from 'react'\r\n\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n    const [username, setUsername] = useState('');\r\n    const [commentText, setCommentText] = useState('');\r\n\r\n    const addComment = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\r\n            method: 'post',\r\n            body: JSON.stringify({username, text : commentText}),\r\n            headers: {\r\n                'content-Type': 'application/json',\r\n            }\r\n        });\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n\r\n    return(\r\n    <div id=\"add-comment-form\">\r\n        <h3>Add a Comment</h3>\r\n        <label>\r\n            Name:\r\n            <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)}/>\r\n        </label>\r\n        <label>\r\n            Comment:        \r\n            <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\r\n        </label>\r\n        <button onClick={() => addComment()}>Add Comment</button>\r\n    </div>\r\n);\r\n}\r\nexport default AddCommentForm;","import React, {useState, useEffect} from 'react';\r\nimport ArticlesList from '../components/ArticlesList';\r\nimport CommentsList from '../components/CommentsList';\r\nimport UpvotesSection from '../components/UpvotesSection';\r\nimport articleContent from './article-content';\r\nimport NotFoundPage from './NotFoundPage';\r\nimport AddCommentForm from '../components/AddCommentForm';\r\n\r\nconst ArticlePage = ({match}) => {\r\n    const name = match.params.name;\r\n    const article = articleContent.find(article => article.name === name)\r\n\r\n    const [articleInfo, setArticleInfo] = useState({upvotes: 0, comments: []});\r\n\r\n    useEffect(() => {\r\n        const fecthData = async () => {\r\n            const result = await fetch(`/api/articles/${name}`)\r\n            const body = await result.json();\r\n            setArticleInfo(body);\r\n        }\r\n        fecthData();\r\n    }, [name]);\r\n\r\n    if(!article) return <NotFoundPage/>\r\n\r\n    const otherArticles = articleContent.filter(article => article.name !== name);\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <h1>{article.title}</h1>\r\n            <UpvotesSection articleName = {name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\r\n            {article.content.map((paragraph, key) => (\r\n                <p key={key}>{paragraph}</p>\r\n            ))}\r\n            <CommentsList comments={articleInfo.comments}/>\r\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo}/>\r\n            <h3>Other Articles:</h3>\r\n            <ArticlesList articles={otherArticles}/>\r\n        </React.Fragment>    \r\n    );\r\n}\r\n\r\nexport default ArticlePage;\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/articles-list\">Articles</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticleListPage from './pages/ArticleListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NavBar from './NavBar';\nimport './App.css';\nimport NotFoundPage from './pages/NotFoundPage';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar/>\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/about\" component={AboutPage}/>\n              <Route path=\"/articles-list\" component={ArticleListPage} />\n              <Route path=\"/article/:name\" component={ArticlePage}/>\n              <Route component={NotFoundPage}/>\n            </Switch>            \n          </div>          \n        </div>\n      </Router>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}